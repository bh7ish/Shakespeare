package org.myorg;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.net.URI;
import java.util.HashSet;
import java.util.StringTokenizer;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;

import java.lang.String;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.lib.input.FileSplit;
import java.util.regex.Pattern;


public class WordCountMapper extends Mapper<LongWritable, Text, Text, IntWritable>
{
	
public void map(LongWritable key, Text value, Context context)
throws IOException, InterruptedException
{

	
	
	  	// Get the input filename into the mapper, calling it 'Title'
	String Title = ((FileSplit) context.getInputSplit()).getPath().getName();
	
	
		// Set up a HashSet entitled 'textList' to store words from the text files
	HashSet<String> textList = new HashSet<String>();
	
		// Set up the mapper to access the file from the Distributed Cache
	URI[] cacheFile = context.getCacheFiles();
	 
	String filename=cacheFile[0].toString();
		
		// Files are in the form of BOOKTITLE_CHAPTER.txt 
		// The code below emits a String with The Book Title, Chapter and Emotion
		// In this example the cached file is Joy
	Pattern pattern = Pattern.compile("_");
        String[] split = pattern.split(Title.substring(0, Title.length()-3));
	String TitleSceneEmotion = split[0] + ", " + split[1] + ", " + "Joy";
		
		
		// Reading in the cached file
	BufferedReader reader = new BufferedReader(new FileReader(filename));
		String line = null;
		while ((line = reader.readLine()) != null) {

                
		}
		reader.close();
		
		// Goes through the 
		StringTokenizer listTokens = new StringTokenizer();
		while(listTokens.hasMoreTokens())
			{	
				
			textList.add(listTokens.nextToken());
			}
			
		
		//Read the text files present in input folder
		StringTokenizer  textTokens = new StringTokenizer(value.toString());
		
		while (textTokens.hasMoreTokens()) {

				String word= textTokens.nextToken();
				
		
				if(textList.contains(word))
				{
					context.write(new Text(TitleSceneEmotion), new IntWritable(1));
				}
				else {
					context.write(new Text(TitleSceneEmotion), new IntWritable(0));
				}
	}
	
}



}
